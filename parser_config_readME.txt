===============================================================
  EMAIL PARSER CONFIG — README / СПРАВКА ПО parser_config.csv
===============================================================

Файл parser_config.csv содержит шаблоны для парсинга писем
и отправки форматированных сообщений в Slack.

Каждая строка в файле задаёт один шаблон для обработки писем.

----------------------------------------------------------------
 ОБЯЗАТЕЛЬНЫЕ ПОЛЯ
----------------------------------------------------------------

1. name
   - Уникальное имя шаблона (для логов и отладки).
   - Пример: xcore_log

2. pattern
   - RegEx-шаблон с именованными группами (?P<имя>...).
   - Применяется ко всему телу письма.
   - Пример:
     (?P<ts>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})\s+\[(?P<lvl>[A-Z]+)\]\s+(?P<rest>.*?)

3. field_map
   - JSON-словарь с выражениями на Python (eval).
   - Вычисляет дополнительные поля на Python-выражениях (eval) из тех данных, что уже поймала основная pattern. Срабатывает после того, как RegEx нашёл совпадение и сформировал groupdict. Доступны в slack_format, могут участвовать в фильтрации/исключении
   - Пример:
     {"stat": "rest.split(':')[1].strip() if ':' in rest else ''"}

4. slack_format
   - Шаблон для вывода в Slack (с подстановкой {field}).
   - Строки разделяются через \n.
   - Пример:
     CATEGORY: XCORE\nTIMESTAMP: {ts}\nLEVEL: {lvl}\nSTATUS: {stat}\nEVENT_TEXT:\n{rest}

----------------------------------------------------------------
 НЕОБЯЗАТЕЛЬНЫЕ ПОЛЯ (добавляют гибкость)
----------------------------------------------------------------

5. note
   – Свободный комментарий, который добавляется в Slack.
   – Скрипт сам ставит *ACTIONS:* перед текстом.
   – Пример: Требуется ручная проверка брокера.

6. exclude_fields
   - Список полей, которые НЕ будут отображаться в Slack.
   - Перечисляются через запятую, без пробелов.
   - Пример: stat,ts

7. email_address
   - Строка для фильтрации отправителя (msg.get("From")).
   - Поддерживает подстроку.
   - Пример: alerts@domain.com или @mycompany.com
   - Если не указано — шаблон применим к любому отправителю.

8. email_theme
   - RegEx для фильтрации темы письма (Subject).
   - Пример: ^XCORE Alert.*
   - Если не указано — шаблон применим к любой теме.

9. strip_pattern
   – RegEx, который удаляется из письма полностью (до поиска pattern). Очищает мусорные подписи, футеры, трек-коды
     Полностью вырезает из текста письма (и из {rest}) всё, что попадает под RegEx; «глобальный remove»
     Аналог старого FOOTER_RE. Можно пустым.

10. truncate_pattern
   – RegEx, который ищется внутри {rest}; всё после совпадения обрезается.  Полезно, когда в конце каждой строки идёт вторичная метка, которую надо отбросить
      Как «ножницы»: нашёл совпадение → обрезал всё, что дальше в {rest}

----------------------------------------------------------------
 ПРИМЕР ПОЛНОЙ СТРОКИ CSV
----------------------------------------------------------------

xcore_log,"(?P<ts>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3})\s+\[(?P<lvl>[A-Z]+)\s*\]\s+(?P<comp>[^:]+):\s*(?P<rest>.*?)(?=(\d{4}-\d{2}-\d{2} \d{2}|\Z))","{""stat"": ""rest.split(':')[1].strip() if ':' in rest else ''""}","*CATEGORY:* XCORE\n*TIMESTAMP:* {ts}\n*LEVEL:* {lvl}\n*STATUS:* {stat}\n*EVENT_TEXT:*\n```\n{rest}\n```",,,,,"this\s*alert\s*has\s*been\s*automatically\s*generated[\s\S]*","\d{4}-\d{2}-\d{2} \d{2}"

----------------------------------------------------------------
 ЗАМЕЧАНИЯ
----------------------------------------------------------------

- Для сложных значений (например, pattern или field_map) обязательно использовать двойные кавычки.
- Поле field_map должно быть валидным JSON-объектом.
- Поля slack_format и note поддерживают \n для перехода на новую строку.
- Все фильтры (email_address и email_theme) работают ДО применения pattern.
- В поле slack_format подставляются как groupdict из pattern, так и поля из field_map.
- В `slack_format` разрешён стандартный Slack mrkdwn (жирный *text*, кодовый блок ``` и т.д.).
- Последовательность \n автоматически превращается в реальный перевод строки.
- Поля из `exclude_fields` убираются ДО форматирования; если такое поле встречается в slack_format, будет ошибка KeyError.
- Если в письме несколько строк, подходящих под один шаблон, они агрегируются: содержимое {rest} склеивается через \n и публикуется одним сообщением.

----------------------------------------------------------------
 ПРИМЕР ВЫВОДА В SLACK
----------------------------------------------------------------

> CATEGORY: XCORE  
> TIMESTAMP: 2024-07-10 12:34:56.789  
> LEVEL: ERROR  
> STATUS: critical system timeout  
> EVENT_TEXT:  
Job failed: critical system timeout  
> ACTIONS: какая-то запись (или отсутствие).

================================================================
