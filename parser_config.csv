name,pattern,field_map,slack_format,note,exclude_fields,email_address,email_theme,strip_pattern,truncate_pattern
xcore_log,(?P<ts>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3})\s+\[(?P<lvl>[A-Z]+)\s*\]\s+(?P<comp>[^:]+):\s*(?P<rest>.*?)(?=(\d{4}-\d{2}-\d{2} \d{2}|\Z)),"{""stat"": ""rest.split(':')[1].strip() if ':' in rest else ''""}",*CATEGORY:* XCORE\n*TIMESTAMP:* {ts}\n*LEVEL:* {lvl}\n*STATUS:* {stat}\n*EVENT_TEXT:*\n```\n{rest}\n```,,,,,this\s*alert\s*has\s*been\s*automatically\s*generated[\s\S]*,\d{4}-\d{2}-\d{2} \d{2}
tpt_hub_alert,(?s)(?=.*(?:Active alerts|Resolved))(?=.*message:)(?=.*consumer:)(?=.*grafana_folder:)(?=.*instance:)(?=.*priority:)(?P<rest>.*),"{""blocks"": ""kv_blocks(rest)"", ""lvl"": ""(lambda val: (val.upper() + ' PRIORITY') if val else '')(next((blk.get('priority') for blk in blocks if blk.get('priority')), ''))"", ""stat"": ""(lambda token: 'RESOLVED' if token.startswith('resolved') else 'ACTIVE ALERT')(next((line.strip().rstrip(':').lower() for line in rest.splitlines() if line.strip()), 'active alerts'))"", ""rest"": ""(lambda chunks: '\\n\\n'.join(chunk for chunk in chunks if chunk).strip())([(lambda b: (b.get('message', '').strip() + ('\\nconsumer: ' + b.get('consumer', '').strip() if b.get('consumer') else '') + ('\\ngrafana_folder: ' + b.get('grafana_folder', '').strip() if b.get('grafana_folder') else '') + ('\\ninstance: ' + b.get('instance', '').strip() if b.get('instance') else '')).strip())(blk) for blk in blocks])"", ""ts"": ""email_ts""}",*CATEGORY:* TPT-HUB\n*TIMESTAMP:* {ts}\n*LEVEL:* {lvl}\n*STATUS:* {stat}\n*EVENT_TEXT:*\n```\n{rest}\n```,,blocks,,(?i)^\[Alert\]\s*TPT Grafana:.*TPT Hub,,---[\s\S]*$
