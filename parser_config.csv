name,pattern,field_map,slack_format,note,exclude_fields,email_address,email_theme,strip_pattern,truncate_pattern
xcore_log,(?P<ts>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3})\s+\[(?P<lvl>[A-Z]+)\s*\]\s+(?P<comp>[^:]+):\s*(?P<rest>.*?)(?=(\d{4}-\d{2}-\d{2} \d{2}|\Z)),"{""stat"": ""rest.split(':')[1].strip() if ':' in rest else ''""}",*CATEGORY:* XCORE\n*TIMESTAMP:* {ts}\n*LEVEL:* {lvl}\n*STATUS:* {stat}\n*EVENT_TEXT:*\n```\n{rest}\n```,,,,,this\s*alert\s*has\s*been\s*automatically\s*generated[\s\S]*,\d{4}-\d{2}-\d{2} \d{2}
tpt_hub_alert,(?s)(?=.*(?:Active alerts|Resolved))(?=.*message:)(?=.*consumer:)(?=.*grafana_folder:)(?=.*instance:)(?=.*priority:)(?P<rest>.*),"{""data"": ""{k.strip().lower(): v.strip() for k, v in (line.split(':', 1) for line in rest.splitlines() if ':' in line)}"", ""lvl"": ""(lambda val: (val.upper() + ' PRIORITY') if val else '')(data.get('priority', ''))"", ""stat"": ""(lambda first: 'RESOLVED' if first.startswith('resolved') else 'ACTIVE ALERT')(next((ln.strip().lower() for ln in rest.splitlines() if ln.strip()), ''))"", ""rest"": ""'\\n'.join([p for p in [data.get('message', '').strip(), 'consumer: ' + data.get('consumer', '').strip() if data.get('consumer') else '', 'grafana_folder: ' + data.get('grafana_folder', '').strip() if data.get('grafana_folder') else '', 'instance: ' + data.get('instance', '').strip() if data.get('instance') else ''] if p]).strip()"", ""ts"": ""email_ts""}",*CATEGORY:* TPT-HUB\n*TIMESTAMP:* {ts}\n*LEVEL:* {lvl}\n*STATUS:* {stat}\n*EVENT_TEXT:*\n```\n{rest}\n```,,,,(?i)^\[Alert\]\s*TPT Grafana:.*TPT Hub,,---[\s\S]*$
